name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Install pnpm dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm build

      - name: Build Tauri application
        run: pnpm tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List build outputs
        run: |
          echo "Build outputs:"
          find src-tauri/target/release/bundle/ -type f -name "*.msi" -o -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" | head -20

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: glance-md-windows
          path: |
            src-tauri/target/release/bundle/
            !src-tauri/target/release/bundle/**/*.blockmap
            !src-tauri/target/release/bundle/**/*.updater.json

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List build artifacts
        run: |
          echo "Listing build artifacts:"
          echo "Artifacts directory structure:"
          find ./artifacts -type d | head -10
          echo ""
          echo "All files in artifacts:"
          find ./artifacts -type f | head -20
          echo ""
          echo "MSI and EXE files:"
          find ./artifacts -name "*.msi" -o -name "*.exe" | head -20

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Windows MSI
        run: |
          echo "Looking for MSI files..."
          find ./artifacts -name "*.msi" -type f
          MSI_FILE=$(find ./artifacts -name "*.msi" -type f | head -1)
          if [ -n "$MSI_FILE" ] && [ -f "$MSI_FILE" ]; then
            echo "Found MSI file: $MSI_FILE"
            echo "File size: $(ls -lh "$MSI_FILE" | awk '{print $5}')"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$MSI_FILE" \
              "${{ steps.create_release.outputs.upload_url }}?name=glance-md-${{ github.ref_name }}-windows-x64.msi"
            echo "MSI upload completed"
          else
            echo "No MSI file found or file doesn't exist"
            echo "Available files in artifacts:"
            find ./artifacts -type f | head -20
            exit 1
          fi

      - name: Upload Windows portable
        run: |
          echo "Looking for EXE files..."
          find ./artifacts -name "*.exe" -type f
          EXE_FILE=$(find ./artifacts -name "*.exe" -type f | head -1)
          if [ -n "$EXE_FILE" ] && [ -f "$EXE_FILE" ]; then
            echo "Found EXE file: $EXE_FILE"
            echo "File size: $(ls -lh "$EXE_FILE" | awk '{print $5}')"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$EXE_FILE" \
              "${{ steps.create_release.outputs.upload_url }}?name=glance-md-${{ github.ref_name }}-windows-x64-portable.exe"
            echo "EXE upload completed"
          else
            echo "No EXE file found or file doesn't exist"
            echo "Available files in artifacts:"
            find ./artifacts -type f | head -20
            exit 1
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          echo "## 新版本发布" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 下载" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Windows**: 下载 [MSI安装包](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/glance-md-${{ github.ref_name }}-windows-x64.msi) 或 [便携版](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/glance-md-${{ github.ref_name }}-windows-x64-portable.exe)" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 更新内容" >> release_notes.md
          echo "" >> release_notes.md
          echo "请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解详细更新内容。" >> release_notes.md

      - name: Update release description
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              body: releaseNotes
            });
